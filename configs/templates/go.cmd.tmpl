package cmd

// Code generated by cli-generator;
{{ $name := strings.CamelCase .cmd.name }}

import (
	{{ if .cmd.root }}
	"github.com/spf13/viper"
	"os"
	{{ end }}
	"fmt"
	"github.com/spf13/cobra"
)

{{- if .cmd.root }}
var cnf *viper.Viper = viper.New()
{{- end }}

var {{$name}}CmdOptions struct {
	{{ range .cmd.flags }}
	{{- .name | strings.CamelCase }} {{ .type | toGolangType }}
	{{ end }}
}

var {{$name}}Cmd = &cobra.Command{
	{{- if .cmd.root }}
	Use:     "{{ .spec.metadata.name }}",
	Version: "{{ .spec.metadata.version }}",
	{{- else }}
	Use:     "{{ .cmd.name }}",
	{{- end }}
	{{- if not .cmd.loose }}

	{{- if (has .cmd "arg" )}}
	Args: func (cmd *cobra.Command, args []string) error {
		var validators []func(cmd *cobra.Command, args []string) error
		{{- range .cmd.arg.rules }}
		validators = append(validators, {{ . | golangRulesToArgsValidation }})
		{{- end}}
		for _, v := range validators {
			if err := v(cmd, args); err != nil {
				return err
			}
		}
		return nil
	},
	{{- end }}

	RunE: func(cmd *cobra.Command, args []string) error {
		return exec{{$name}}()
	},
	{{- end }}
	{{- if .spec.metadata.description }}
	Long: "{{ .spec.metadata.description }}",
	{{- end }}
	PreRun: func(cmd *cobra.Command, args []string) {

		{{- if (has .cmd "arg" )}}
		cnf.Set("{{.cmd.arg.name}}", args )
		{{- end }}

		{{- if not .cmd.root }}
		{{ .cmd.parent }}Cmd.PreRun(cmd, args)
		{{- end }}
		{{ range .cmd.flags }}
		cnf.Set("{{- .name | strings.CamelCase }}", {{$name}}CmdOptions.{{- .name | strings.CamelCase }})
		{{ end }}
	},
}


{{ if .cmd.root }}
// Execute - execute the root command
func Execute() {
	err := {{$name}}Cmd.Execute()
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
}
{{ end }}

func init() {
{{- range .cmd.flags }}
	{{- if .envVar }}
	cnf.BindEnv("{{ .name }}", "{{ .envVar }}")
	{{- end }}
	{{- if ( has . "default" ) }}
	{{ if eq .type "string" }}
	cnf.SetDefault("{{ strings.CamelCase .name}}", {{ .default | quote }})
	{{ else }}
	cnf.SetDefault("{{ strings.CamelCase .name}}", {{ .default }})
	{{ end }}
	{{- end }}

	{{ $description := "" }}
	{{- if (has . "description" ) }}
	{{ $description = .description }}
	{{- end }}

	{{- if (and ( has . "enum" ) .enum ) -}}
		{{- $description = (printf "%s [options:" $description ) -}}
		{{- range .enum -}}
		{{- $description = (printf "%s %s" $description .) -}}
		{{- end -}}
		{{- $description = (printf "%s]" $description ) -}}
	{{- end -}}

	{{- if (has . "envVar" ) -}}
		{{- $description = (printf "%s [$%s]" $description .envVar ) -}}
	{{- end -}}
	
	{{ $name }}Cmd.PersistentFlags().{{ .type | golangFlagFunc }}(&{{ $name }}CmdOptions.{{- .name | strings.CamelCase }}, "{{- .name }}", cnf.{{ golangFlagDefaultFunc .type }}("{{ strings.CamelCase .name}}"), "{{ $description }}")
	
{{- end }}

{{- if not .cmd.root }}
	{{ .cmd.parent }}Cmd.AddCommand({{$name}}Cmd)
{{- end }}
}
{{ if not .cmd.root }}
func exec{{$name}}() error {
	fmt.Println("Hello World")
	return nil
}
{{ end }}