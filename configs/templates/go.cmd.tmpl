// Code generated by cli-generator; DO NOT EDIT.
package cmd

{{ $name := strings.CamelCase .cmd.name }}

import (
	{{ if .cmd.root }}
	"fmt"
	"github.com/spf13/viper"
	{{ end }}
	{{- if not .cmd.root }}
	handler "{{ .go.package }}/pkg/{{$name}}"
	{{end}}
	"github.com/spf13/cobra"
	
)

{{- if .cmd.root }}
var cnf *viper.Viper = viper.New()
{{- end }}

var {{$name}}CmdOptions struct {
	{{ range .cmd.flags }}
	{{- .name | strings.CamelCase }} {{ .type | toGolangType }}
	{{ end }}
}

var {{$name}}Cmd = &cobra.Command{
	{{- if .cmd.root }}
	Use:     "{{ .spec.metadata.name }}",
	Version: "{{ .spec.metadata.version }}",
	{{ else }}
	Use:     "{{ .cmd.name }}",
	RunE: func(cmd *cobra.Command, args []string) error {
		h := &handler.Handler{}
		return h.Handle(cnf)
	},
	{{- end }}
	{{- if .spec.metadata.description }}
	Long: "{{ .spec.metadata.description }}",
	{{- end }}
	PreRun: func(cmd *cobra.Command, args []string) {
		{{- if not .cmd.root }}
		{{ .cmd.parent }}Cmd.PreRun(cmd, args)
		{{- end }}
		{{ range .cmd.flags }}
		cnf.Set("{{- .name | strings.CamelCase }}", {{$name}}CmdOptions.{{- .name | strings.CamelCase }})
		{{ end }}
	},
}


{{ if .cmd.root }}
// Execute - execute the root command
func Execute() {
	err := {{$name}}Cmd.Execute()
	if err != nil {
		fmt.Println(err.Error())
	}
}
{{ end }}

func init() {
{{- range .cmd.flags }}
	{{- if .envVar }}
	cnf.BindEnv("{{ .name }}", "{{ .envVar }}")
	{{- end }}
	{{- if ( has . "default" ) }}
	cnf.SetDefault("{{ strings.CamelCase .name}}", {{ .default }})
	{{- end }}

	{{ $name }}Cmd.PersistentFlags().{{ .type | golangFlagFunc }}(&{{ $name }}CmdOptions.{{- .name | strings.CamelCase }}, "{{- .name }}", cnf.{{ golangFlagDefaultFunc .type }}("{{ strings.CamelCase .name}}"), "{{ default "" .description }}")
	
{{- end }}

{{- if .cmd.parent }}
	{{ .cmd.parent }}Cmd.AddCommand({{$name}}Cmd)
{{- end }}
}