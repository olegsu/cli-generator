
// Code generated by go generate; DO NOT EDIT.
// using data from templates/templates
package templates

func TemplatesMap() map[string]string {
    templatesMap := make(map[string]string)

templatesMap["go.cmd.tmpl"] = `package cmd

// Code generated by cli-generator;

import (
	{{ if .Cmd.Root }}
	"github.com/spf13/viper"
	"os"
	{{ end }}
	"fmt"
	"github.com/spf13/cobra"
)
{{- if .Cmd.Root }}
var cnf *viper.Viper = viper.New()
{{- end }}

type (
	{{ buildFullCmdName .Cmd }}CmdOptions struct {
	{{ range .Cmd.Flags }}
	{{- .Name | strings.CamelCase }} {{ toGolangType .Type }}
	{{ end }}		
	}
)

var {{ buildFullCmdName .Cmd }}Options {{ buildFullCmdName .Cmd }}CmdOptions

var {{ buildFullCmdName .Cmd }}Cmd = &cobra.Command{
	{{- if .Cmd.Root }}
	Use:     "{{ .Spec.Metadata.Name }}",
	Version: "{{ .Spec.Metadata.Version }}",
	{{- else }}
	Use:     "{{ .Cmd.Name }}",
	{{- end }}
	{{- if not .Cmd.Loose }}

	{{- if (has .Cmd "Arg" )}}
	Args: func (cmd *cobra.Command, args []string) error {
		var validators []func(cmd *cobra.Command, args []string) error
		{{- range .Cmd.Arg.Rules }}
		validators = append(validators, {{ . | golangRulesToArgsValidation }})
		{{- end}}
		for _, v := range validators {
			if err := v(cmd, args); err != nil {
				return err
			}
		}
		return nil
	},
	{{- end }}

	RunE: func(cmd *cobra.Command, args []string) error {
		return exec{{ buildFullCmdName .Cmd }}({{ buildFullCmdName .Cmd }}Options)
	},
	{{- end }}
	{{- if .spec.metadata.description }}
	Long: "{{ .spec.metadata.description }}",
	{{- end }}
	PreRun: func(cmd *cobra.Command, args []string) {

		{{- if (has .Cmd "Arg" )}}
		cnf.Set("{{.Cmd.Arg.Name}}", args )
		{{- end }}

		{{- if not .Cmd.Root }}
		{{ .Cmd.Parent }}Cmd.PreRun(cmd, args)
		{{- end }}
		{{ range .Cmd.Flags }}
		cnf.Set("{{- .Name | strings.CamelCase }}", {{ buildFullCmdName $.Cmd }}Options.{{- .Name | strings.CamelCase }})
		{{ end }}
	},
}


{{ if .Cmd.Root }}
// Execute - execute the root command
func Execute() {
	err := {{ buildFullCmdName .Cmd }}Cmd.Execute()
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
}
{{ end }}

func init() {
{{- range .Cmd.Flags }}
	{{- if .EnvVar }}
	cnf.BindEnv("{{ .Name }}", "{{ .EnvVar }}")
	{{- end }}
	{{- if ( has . "Default" ) }}
	{{ if eq .Type "string" }}
	cnf.SetDefault("{{ strings.CamelCase .name}}", {{ .Default | quote }})
	{{ else }}
	cnf.SetDefault("{{ strings.CamelCase .name}}", {{ .Default }})
	{{ end }}
	{{- end }}

	{{ $description := "" }}
	{{- if (has . "Description" ) }}
	{{ $description = .Description }}
	{{- end }}

	{{- if (and ( has . "Enum" ) .Enum ) -}}
		{{- $description = (printf "%s [options:" $description ) -}}
		{{- range .Enum -}}
		{{- $description = (printf "%s %s" $description .) -}}
		{{- end -}}
		{{- $description = (printf "%s]" $description ) -}}
	{{- end -}}

	{{- if (has . "EnvVar" ) -}}
		{{- $description = (printf "%s [$%s]" $description .EnvVar ) -}}
	{{- end -}}
	
	{{ buildFullCmdName $.Cmd }}Cmd.PersistentFlags().{{ .Type | golangFlagFunc }}(&{{ buildFullCmdName $.Cmd }}Options.{{- .Name | strings.CamelCase }}, "{{- .Name }}", cnf.{{ golangFlagDefaultFunc .Type }}("{{ strings.CamelCase .Name}}"), "{{ $description }}")
	
{{- end }}

{{- if not .Cmd.Root }}
	{{ .Cmd.Parent }}Cmd.AddCommand({{ buildFullCmdName .Cmd }}Cmd)
{{- end }}
}
{{ if not .Cmd.Root }}
func exec{{ buildFullCmdName .Cmd }}(options {{ buildFullCmdName .Cmd }}CmdOptions) error {
	fmt.Println("Running cmd: {{ .Cmd.Name }}")
	fmt.Printf("{{ buildFullCmdName .Cmd }}CmdOptions: %v\n", options)
	return nil
}
{{ end }}` 

templatesMap["go.main.tmpl"] = `// Code generated by cli-generator; DO NOT EDIT.
package main

import (
	cmd "{{ .go.package }}/cmd"
)

func main() {
	cmd.Execute()
}` 

templatesMap["go.makefile.tmpl"] = `outfile = {{.Spec.Metadata.Name}}
build:
	@echo "Building go binary"
	@go build -o $(outfile) *.go
	@chmod +x $(outfile)
` 

templatesMap["spec.json"] = `{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "definitions": {
        "flag": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "string",
                        "bool",
                        "number",
                        "arrayBool",
                        "arrayString",
                        "arrayNumber"
                    ]
                },
                "alias": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": []
                },
                "default": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean",
                    "default": false                    
                },
                "enum": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "envVar": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "required",
                "type"
            ]
        },
        "command": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "pattern": ".+"
                },
                "parent": {
                    "type": "string",
                    "description": "Applicative property, user data will be ignored"
                },
                "root": {
                    "type": "boolean",
                    "description": "Applicative property, user data will be ignored",
                    "default": false
                },
                "flags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/flag"
                    }
                },
                "loose": {
                    "type": "boolean",
                    "default": false
                },
                "arg": {
                    "$ref": "#/definitions/argument"
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/command"
                    }
                }
            },
            "required": [
                "name",
                "root"
            ]
        },
        "argument": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "any",
                            "atLeastOne",
                            "atLeastTwo",
                            "exactlyOne"
                        ]
                    },
                    "default": [
                        "any"
                    ]
                }
            },
            "required": [
                "name"
            ]
        }
    },
    "properties": {
        "metadata": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "CLI Name",
                    "type": "string",
                    "pattern": ".+"
                },
                "version": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "version"
            ]
        },
        "commands": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/command"
            }
        },
        "flags": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/flag"
            }
        },
        "loose": {
            "type": "boolean",
            "default": false
        },
        "arg": {
            "$ref": "#/definitions/argument"
        }
    },
    "required": [
        "metadata"
    ]
}` 

    return  templatesMap
}
