// Code generated by cli-generator; DO NOT EDIT.
package cmd



import (
	
	handler "github.com/olegsu/cli-generator/pkg/calculateSha"
	
	"github.com/spf13/cobra"
)

var calculateShaCmdOptions struct {
	language string
	goPackage string
	spec string
	projectDir string
	
}

var calculateShaCmd = &cobra.Command{
	Use:     "calculate-sha",

	RunE: func(cmd *cobra.Command, args []string) error {
		h := &handler.Handler{}
		return h.Handle(cnf)
	},
	Long: "Generate CLI entrypoints from spec file",
	PreRun: func(cmd *cobra.Command, args []string) {
		rootCmd.PreRun(cmd, args)
		
		cnf.Set("language", calculateShaCmdOptions.language)
		
		cnf.Set("goPackage", calculateShaCmdOptions.goPackage)
		
		cnf.Set("spec", calculateShaCmdOptions.spec)
		
		cnf.Set("projectDir", calculateShaCmdOptions.projectDir)
		
	},
}




func init() {

	calculateShaCmd.PersistentFlags().StringVar(&calculateShaCmdOptions.language, "language", cnf.GetString("language"), "")

	calculateShaCmd.PersistentFlags().StringVar(&calculateShaCmdOptions.goPackage, "go-package", cnf.GetString("goPackage"), "")

	calculateShaCmd.PersistentFlags().StringVar(&calculateShaCmdOptions.spec, "spec", cnf.GetString("spec"), "")

	calculateShaCmd.PersistentFlags().StringVar(&calculateShaCmdOptions.projectDir, "project-dir", cnf.GetString("projectDir"), "")
	rootCmd.AddCommand(calculateShaCmd)
}